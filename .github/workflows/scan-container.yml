name: Container Security Scanning

on:
  workflow_call:
    inputs:
      fail_on_critical:
        required: false
        type: boolean
        default: true
        description: "Whether to fail the workflow on critical vulnerabilities"
    outputs:
      scan_status:
        description: "Status of container security scan"
        value: ${{ jobs.scan-container.outputs.status }}

jobs:
  scan-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    outputs:
      status: ${{ steps.set-output.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Download image information
        uses: actions/download-artifact@v4
        with:
          name: image-info
          path: ./
      
      - name: Get image repository and tag
        id: image-info
        run: |
          IMAGE_REPO=$(cat image-repo.txt)
          IMAGE_TAG=$(cat image-tag.txt)
          echo "image_repo=$IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      
      - name: Pull Docker image
        run: docker pull ${{ steps.image-info.outputs.image_repo }}:${{ steps.image-info.outputs.image_tag }}
      
      - name: Run Trivy container scan
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image-info.outputs.image_repo }}:${{ steps.image-info.outputs.image_tag }}
          format: 'table'
          output: 'trivy-container-results.txt'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Create container scan report directory
        run: |
          mkdir -p container-scan-reports
          
          # Copy Trivy container scan results if they exist
          if [ -f "trivy-container-results.txt" ]; then
            cp trivy-container-results.txt container-scan-reports/ || true
          fi
          
          # Create summary file
          echo "# Container Security Scan Summary" > container-scan-reports/summary.md
          echo "## Scan performed at $(date)" >> container-scan-reports/summary.md
          echo "## Image: ${{ steps.image-info.outputs.image_repo }}:${{ steps.image-info.outputs.image_tag }}" >> container-scan-reports/summary.md
          
          # Create a placeholder file to ensure the directory is not empty
          touch container-scan-reports/.gitkeep
        if: always()
      
      - name: Upload container scan report
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-report
          path: container-scan-reports/
          retention-days: 5
        if: always()
      
      - name: Check for critical vulnerabilities
        id: check-vulnerabilities
        run: |
          # Extract critical vulnerabilities count from Trivy output
          CRITICAL_COUNT=$(docker run --rm aquasec/trivy:latest ${{ steps.image-info.outputs.image_repo }}:${{ steps.image-info.outputs.image_tag }} -f json | jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL")' | jq -s 'length')
          echo "Found $CRITICAL_COUNT critical vulnerabilities"
          
          # Count unfixable critical vulnerabilities
          UNFIXABLE_CRITICAL=$(docker run --rm aquasec/trivy:latest ${{ steps.image-info.outputs.image_repo }}:${{ steps.image-info.outputs.image_tag }} -f json | jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL" and .FixedVersion == null)' | jq -s 'length')
          echo "Found $UNFIXABLE_CRITICAL unfixable critical vulnerabilities"
          
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "unfixable_critical=$UNFIXABLE_CRITICAL" >> $GITHUB_OUTPUT
      
      - name: Set final output status
        id: set-output
        run: |
          if [[ "${{ inputs.fail_on_critical }}" == "true" && "${{ steps.check-vulnerabilities.outputs.unfixable_critical }}" -gt 0 && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Failing build due to unfixable critical vulnerabilities in production image"
            exit 1
          else
            echo "status=passed" >> $GITHUB_OUTPUT
          fi