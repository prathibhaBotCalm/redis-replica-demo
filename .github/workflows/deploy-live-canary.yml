name: Deploy to Live Environment (Canary)
on:
  workflow_call:

jobs:
  deploy-live-canary:
    runs-on: ubuntu-latest
    name: Deploy to Live Environment (Canary)
    
    # Define environment variables for the entire workflow
    env:
      NODE_ENV: production
      REPO_NAME: ${{ github.repository }}
      
    steps:
      - name: Set repository name lower-case
        id: repo
        run: |
          repo=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "repo=${repo}" >> $GITHUB_OUTPUT

      - name: Verify Live Secrets
        run: |
          # Define required secrets in an array
          REQUIRED_SECRETS=(
            "LIVE_HOST" "LIVE_USER" "LIVE_SSH_KEY" "APP_PORT" 
            "REDIS_MASTER_PORT" "REDIS_SLAVE_1_PORT" "REDIS_SLAVE_2_PORT" 
            "REDIS_SLAVE_3_PORT" "REDIS_SLAVE_4_PORT"
            "SENTINEL_1_PORT" "SENTINEL_2_PORT" "SENTINEL_3_PORT" 
            "REDIS_PASSWORD" "REDIS_MASTER_NAME" "REDIS_SENTINEL_QUORUM" 
            "REDIS_HOST_PROD" "REDIS_SENTINELS_PROD" "REDIS_PORT" "CANARY_WEIGHT"
            "IS_DEV"
          )
          
          # Check each required secret
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "::error::Secret $secret is not set"
              exit 1
            fi
          done
        env:
          LIVE_HOST: ${{ secrets.LIVE_HOST }}
          LIVE_USER: ${{ secrets.LIVE_USER }}
          LIVE_SSH_KEY: ${{ secrets.LIVE_SSH_KEY }}
          APP_PORT: ${{ secrets.APP_PORT }}
          REDIS_MASTER_PORT: ${{ secrets.REDIS_MASTER_PORT }}
          REDIS_SLAVE_1_PORT: ${{ secrets.REDIS_SLAVE_1_PORT }}
          REDIS_SLAVE_2_PORT: ${{ secrets.REDIS_SLAVE_2_PORT }}
          REDIS_SLAVE_3_PORT: ${{ secrets.REDIS_SLAVE_3_PORT }}
          REDIS_SLAVE_4_PORT: ${{ secrets.REDIS_SLAVE_4_PORT }}
          SENTINEL_1_PORT: ${{ secrets.SENTINEL_1_PORT }}
          SENTINEL_2_PORT: ${{ secrets.SENTINEL_2_PORT }}
          SENTINEL_3_PORT: ${{ secrets.SENTINEL_3_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_MASTER_NAME: ${{ secrets.REDIS_MASTER_NAME }}
          REDIS_SENTINEL_QUORUM: ${{ secrets.REDIS_SENTINEL_QUORUM }}
          REDIS_HOST_PROD: ${{ secrets.REDIS_HOST_PROD }}
          REDIS_SENTINELS_PROD: ${{ secrets.REDIS_SENTINELS_PROD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          CANARY_WEIGHT: ${{ secrets.CANARY_WEIGHT }}
          IS_DEV: ${{ secrets.IS_DEV }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy deploy files to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          source: './*'
          target: '/home/${{ secrets.LIVE_USER }}/app'

      - name: Deploy Canary Release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          envs: |
            GITHUB_TOKEN,${{ secrets.GITHUB_TOKEN }}
            GITHUB_ACTOR,${{ github.actor }}
            LIVE_USER,${{ secrets.LIVE_USER }}
            APP_PORT,${{ secrets.APP_PORT }}
            REDIS_MASTER_PORT,${{ secrets.REDIS_MASTER_PORT }}
            REDIS_SLAVE_1_PORT,${{ secrets.REDIS_SLAVE_1_PORT }}
            REDIS_SLAVE_2_PORT,${{ secrets.REDIS_SLAVE_2_PORT }}
            REDIS_SLAVE_3_PORT,${{ secrets.REDIS_SLAVE_3_PORT }}
            REDIS_SLAVE_4_PORT,${{ secrets.REDIS_SLAVE_4_PORT }}
            SENTINEL_1_PORT,${{ secrets.SENTINEL_1_PORT }}
            SENTINEL_2_PORT,${{ secrets.SENTINEL_2_PORT }}
            SENTINEL_3_PORT,${{ secrets.SENTINEL_3_PORT }}
            REDIS_PASSWORD,${{ secrets.REDIS_PASSWORD }}
            REDIS_MASTER_NAME,${{ secrets.REDIS_MASTER_NAME }}
            REDIS_SENTINEL_QUORUM,${{ secrets.REDIS_SENTINEL_QUORUM }}
            REDIS_HOST_PROD,${{ secrets.REDIS_HOST_PROD }}
            REDIS_SENTINELS_PROD,${{ secrets.REDIS_SENTINELS_PROD }}
            REDIS_PORT,${{ secrets.REDIS_PORT }}
            CANARY_WEIGHT,${{ secrets.CANARY_WEIGHT }}
            IS_DEV,${{ secrets.IS_DEV }}
            REPO,${{ steps.repo.outputs.repo }}
            GITHUB_SHA,${{ github.sha }}
            BACKUP_INTERVAL,${{ secrets.BACKUP_INTERVAL }}
            MAX_BACKUPS,${{ secrets.MAX_BACKUPS }}
            RETENTION_DAYS,${{ secrets.RETENTION_DAYS }}
            GDRIVE_ENABLED,${{ secrets.GDRIVE_ENABLED }}
            GDRIVE_DIR,${{ secrets.GDRIVE_DIR }}
            GDRIVE_MAX_BACKUPS,${{ secrets.GDRIVE_MAX_BACKUPS }}
            GDRIVE_RETENTION_DAYS,${{ secrets.GDRIVE_RETENTION_DAYS }}
          script: |
            set -euo pipefail
            cd /home/${LIVE_USER}/app

            # Install required dependencies
            function ensure_dependency() {
              local dep_name=$1
              local install_cmd=$2
              
              if ! command -v ${dep_name} &> /dev/null; then
                echo "${dep_name} not found, installing..."
                eval "${install_cmd}"
              else
                echo "${dep_name} is already installed"
              fi
            }
            
            # Ensure Docker is installed
            ensure_dependency "docker" "sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl start docker && sudo systemctl enable docker && sudo usermod -aG docker \$USER"
            
            # Ensure Docker Compose is installed
            ensure_dependency "docker-compose" "sudo curl -L \"https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose"

            echo "Logging into GHCR..."
            echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin

            # Clean up existing containers
            echo "Cleaning up existing containers..."
            docker-compose down || true

            # Create or update .env file
            if [ ! -f .env ]; then
              cp .env.example .env
            fi

            # Create environment variables file
            cat > .env.production << EOF
            NODE_ENV=production
            APP_PORT=${APP_PORT}
            REDIS_MASTER_PORT=${REDIS_MASTER_PORT}
            REDIS_SLAVE_1_PORT=${REDIS_SLAVE_1_PORT}
            REDIS_SLAVE_2_PORT=${REDIS_SLAVE_2_PORT}
            REDIS_SLAVE_3_PORT=${REDIS_SLAVE_3_PORT}
            REDIS_SLAVE_4_PORT=${REDIS_SLAVE_4_PORT}
            SENTINEL_1_PORT=${SENTINEL_1_PORT}
            SENTINEL_2_PORT=${SENTINEL_2_PORT}
            SENTINEL_3_PORT=${SENTINEL_3_PORT}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
            REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
            REDIS_SENTINELS=sentinel-1:${SENTINEL_1_PORT},sentinel-2:${SENTINEL_2_PORT},sentinel-3:${SENTINEL_3_PORT}
            REDIS_HOST=${REDIS_HOST_PROD}
            REDIS_PORT=${REDIS_PORT}
            CANARY_WEIGHT=${CANARY_WEIGHT}
            REDIS_SENTINELS_PROD=${REDIS_SENTINELS_PROD}
            REDIS_HOST_PROD=${REDIS_HOST_PROD}
            IS_DEV=${IS_DEV}
            BACKUP_INTERVAL=${BACKUP_INTERVAL}
            MAX_BACKUPS=${MAX_BACKUPS}
            RETENTION_DAYS=${RETENTION_DAYS}
            GDRIVE_ENABLED=${GDRIVE_ENABLED}
            GDRIVE_DIR=${GDRIVE_DIR}
            GDRIVE_MAX_BACKUPS=${GDRIVE_MAX_BACKUPS}
            GDRIVE_RETENTION_DAYS=${GDRIVE_RETENTION_DAYS}

            EOF
            
            # Update main .env file with production settings
            cat .env.production >> .env

            # Make any necessary scripts executable
            chmod +x scripts/*.sh

            # Pull the latest images for production
            echo "Pulling latest live images..."
            docker pull ghcr.io/${REPO}:live-latest
            docker pull ghcr.io/${REPO}:live-${GITHUB_SHA}

            # Create an override file for the canary deployment
            cat > docker-compose.override.yml << EOF
            services:
              app-stable:
                image: ghcr.io/${REPO}:live-latest
                env_file: .env.production
                ports:
                  - "3001:${APP_PORT}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3

              app-canary:
                image: ghcr.io/${REPO}:live-${GITHUB_SHA}
                env_file: .env.production
                ports:
                  - "3002:${APP_PORT}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3

            volumes:
              redis-data:
              grafana-data:
            EOF

            # Validate Docker Compose configuration
            echo "Validating Docker Compose configuration..."
            docker-compose config

            # Bring up production services (including Redis and the app variants)
            echo "Starting Redis services and application containers..."
            docker-compose --profile production up -d

            # Wait for services to initialize
            echo "Waiting for services to be ready..."
            sleep 10

            # Ensure Nginx is installed
            ensure_dependency "nginx" "sudo lsof -i :80 || true && sudo systemctl stop nginx || true && sudo apt-get update && sudo apt-get install -y nginx && sudo systemctl stop nginx"

            # Configure Nginx for canary deployment
            echo "Updating Nginx configuration for canary deployment..."
            sudo mkdir -p /etc/nginx/conf.d

            # First verify if ports 3001 and 3002 are accessible
            echo "Verifying ports 3001 and 3002 are accessible..."
            timeout 5 curl -s http://localhost:3001 || echo "Port 3001 not responding yet"
            timeout 5 curl -s http://localhost:3002 || echo "Port 3002 not responding yet"

            # Create the Nginx configuration file
            cat <<'EOF' | sudo tee /etc/nginx/conf.d/nextjs-app.conf
            upstream nextjs_stable {
                server 127.0.0.1:3001;
            }

            upstream nextjs_canary {
                server 127.0.0.1:3002;
            }

            # Split traffic between stable and canary based on a random number
            split_clients "${remote_addr}${time_iso8601}" $upstream {
                CANARY_PERCENT%  nextjs_canary;
                *                nextjs_stable;
            }

            server {
                listen 80;

                # Add header to identify the serving version
                add_header X-Version $upstream;

                location / {
                    proxy_pass http://$upstream;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                }
            }
            EOF

            # Replace the canary weight placeholder
            sudo sed -i "s/CANARY_PERCENT/${CANARY_WEIGHT}/" /etc/nginx/conf.d/nextjs-app.conf

            # Backup the default nginx site configuration (if it exists)
            if [ -f /etc/nginx/sites-enabled/default ]; then
              sudo mv /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/default.bak
            fi

            # Test Nginx configuration
            echo "Testing Nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed. Starting/reloading Nginx..."
              sudo systemctl restart nginx || sudo systemctl start nginx
              sleep 3
              sudo systemctl status nginx
            else
              echo "Nginx configuration failed. Checking for errors..."
              sudo cat /var/log/nginx/error.log
              exit 1
            fi

            echo "Canary deployment completed successfully. Routing ${CANARY_WEIGHT}% of traffic to the new version."
            echo "Monitor the canary deployment before promoting it to stable."