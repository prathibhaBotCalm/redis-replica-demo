name: Deploy to Live Environment (Canary)
on:
  workflow_call:

jobs:
  deploy-live-canary:
    runs-on: ubuntu-latest
    name: Deploy to Live Environment (Canary)
    env:
      NODE_ENV: production
      CANARY_WEIGHT: 20
    steps:
      - name: Verify Live Secrets
        run: |
          for secret in LIVE_HOST LIVE_USER LIVE_SSH_KEY APP_PORT REDIS_MASTER_PORT REDIS_SLAVE_1_PORT REDIS_SLAVE_2_PORT SENTINEL_1_PORT SENTINEL_2_PORT SENTINEL_3_PORT REDIS_PASSWORD REDIS_MASTER_NAME REDIS_SENTINEL_QUORUM REDIS_HOST_PROD REDIS_SENTINELS_PROD REDIS_PORT CANARY_WEIGHT; do
            if [ -z "${!secret}" ]; then
              echo "::error::Secret $secret is not set"
              exit 1
            fi
          done
        env:
          LIVE_HOST: ${{ secrets.LIVE_HOST }}
          LIVE_USER: ${{ secrets.LIVE_USER }}
          LIVE_SSH_KEY: ${{ secrets.LIVE_SSH_KEY }}
          APP_PORT: ${{ secrets.APP_PORT }}
          REDIS_MASTER_PORT: ${{ secrets.REDIS_MASTER_PORT }}
          REDIS_SLAVE_1_PORT: ${{ secrets.REDIS_SLAVE_1_PORT }}
          REDIS_SLAVE_2_PORT: ${{ secrets.REDIS_SLAVE_2_PORT }}
          SENTINEL_1_PORT: ${{ secrets.SENTINEL_1_PORT }}
          SENTINEL_2_PORT: ${{ secrets.SENTINEL_2_PORT }}
          SENTINEL_3_PORT: ${{ secrets.SENTINEL_3_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_MASTER_NAME: ${{ secrets.REDIS_MASTER_NAME }}
          REDIS_SENTINEL_QUORUM: ${{ secrets.REDIS_SENTINEL_QUORUM }}
          REDIS_HOST_PROD: ${{ secrets.REDIS_HOST_PROD }}
          REDIS_SENTINELS_PROD: ${{ secrets.REDIS_SENTINELS_PROD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          CANARY_WEIGHT: ${{ secrets.CANARY_WEIGHT }}
          IS_DEV: ${{ secrets.IS_DEV }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set repository name lower-case
        id: repo
        run: |
          repo=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "repo=${repo}" >> $GITHUB_OUTPUT

      - name: Copy deploy files to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          source: './*'
          target: '/home/${{ secrets.LIVE_USER }}/app'

      - name: Deploy Canary Release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.LIVE_USER }}/app

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            else
              echo "Docker is already installed"
            fi

            # Ensure Docker Compose is installed (legacy command)
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose is already installed"
            fi

            echo "Logging into GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Create or update .env file
            if [ ! -f .env ]; then
              cp .env.example .env
            fi

            # Append production environment variables to .env
            cat <<EOF >> .env
            NODE_ENV=production
            APP_PORT=${{ secrets.APP_PORT }}
            REDIS_MASTER_PORT=${{ secrets.REDIS_MASTER_PORT }}
            REDIS_SLAVE_1_PORT=${{ secrets.REDIS_SLAVE_1_PORT }}
            REDIS_SLAVE_2_PORT=${{ secrets.REDIS_SLAVE_2_PORT }}
            SENTINEL_1_PORT=${{ secrets.SENTINEL_1_PORT }}
            SENTINEL_2_PORT=${{ secrets.SENTINEL_2_PORT }}
            SENTINEL_3_PORT=${{ secrets.SENTINEL_3_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_MASTER_NAME=${{ secrets.REDIS_MASTER_NAME }}
            REDIS_SENTINEL_QUORUM=${{ secrets.REDIS_SENTINEL_QUORUM }}
            REDIS_SENTINELS=sentinel-1:${{ secrets.SENTINEL_1_PORT }},sentinel-2:${{ secrets.SENTINEL_2_PORT }},sentinel-3:${{ secrets.SENTINEL_3_PORT }}
            REDIS_HOST=${{ secrets.REDIS_HOST_PROD }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            CANARY_WEIGHT=${{ secrets.CANARY_WEIGHT }}
            REDIS_SENTINELS_PROD=${{ secrets.REDIS_SENTINELS_PROD }}
            REDIS_HOST_PROD=${{ secrets.REDIS_HOST_PROD }}
            IS_DEV=${{ secrets.IS_DEV }}
            EOF

            # Make any necessary scripts executable
            chmod +x scripts/*.sh

            # Pull the latest images for production
            echo "Pulling latest live images..."
            docker pull ghcr.io/${{ steps.repo.outputs.repo }}:live-latest
            docker pull ghcr.io/${{ steps.repo.outputs.repo }}:live-${{ github.sha }}

            # Create an override file for the canary deployment
            cat <<EOF > docker-compose.override.yml
            services:
              app-stable:
                image: ghcr.io/${{ steps.repo.outputs.repo }}:live-latest
                container_name: nextjs-app-stable
                environment:
                  - NODE_ENV=production
                  - APP_PORT=${{ secrets.APP_PORT }}
                  - REDIS_SENTINELS=sentinel-1:${{ secrets.SENTINEL_1_PORT }},sentinel-2:${{ secrets.SENTINEL_2_PORT }},sentinel-3:${{ secrets.SENTINEL_3_PORT }}
                  - REDIS_MASTER_NAME=${{ secrets.REDIS_MASTER_NAME }}
                  - REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
                  - REDIS_SENTINEL_QUORUM=${{ secrets.REDIS_SENTINEL_QUORUM }}
                ports:
                  - "3001:${{ secrets.APP_PORT }}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3

              app-canary:
                image: ghcr.io/${{ steps.repo.outputs.repo }}:live-${{ github.sha }}
                container_name: nextjs-app-canary
                environment:
                  - NODE_ENV=production
                  - APP_PORT=${{ secrets.APP_PORT }}
                  - REDIS_SENTINELS=sentinel-1:${{ secrets.SENTINEL_1_PORT }},sentinel-2:${{ secrets.SENTINEL_2_PORT }},sentinel-3:${{ secrets.SENTINEL_3_PORT }}
                  - REDIS_MASTER_NAME=${{ secrets.REDIS_MASTER_NAME }}
                  - REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
                  - REDIS_SENTINEL_QUORUM=${{ secrets.REDIS_SENTINEL_QUORUM }}
                ports:
                  - "3002:${{ secrets.APP_PORT }}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3
            EOF

            # Bring up production services (including Redis and the app variants)
            echo "Starting Redis services and application containers..."
            docker-compose --profile production up -d

            # Wait for services to initialize
            echo "Waiting for services to be ready..."
            sleep 10

            # Configure Nginx for canary deployment
            echo "Updating Nginx configuration for canary deployment..."
            sudo mkdir -p /etc/nginx/conf.d

            cat <<EOF | sudo tee /etc/nginx/conf.d/nextjs-app.conf
            upstream nextjs_stable {
                server 127.0.0.1:3001;
            }

            upstream nextjs_canary {
                server 127.0.0.1:3002;
            }

            # Select upstream based on request_id (rough canary weighting)
            map \$request_id \$upstream {
                ~^.{0,2}[0-${{ env.CANARY_WEIGHT }}].*\$    nextjs_canary;
                default                                      nextjs_stable;
            }

            server {
                listen 80;

                # Add header to identify the serving version
                add_header X-Version \$upstream;

                location / {
                    proxy_pass http://\$upstream;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Request-ID \$request_id;
                }
            }
            EOF

            # Ensure Nginx is installed
            if ! command -v nginx &> /dev/null; then
              echo "Nginx not found, installing..."
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Test and reload Nginx configuration
            sudo nginx -t
            if [ $? -eq 0 ]; then
              echo "Reloading Nginx..."
              sudo systemctl reload nginx
            else
              echo "Nginx configuration error. Please check configuration."
              exit 1
            fi

            echo "Canary deployment completed successfully. Routing ${{ env.CANARY_WEIGHT }}% of traffic to the new version."
            echo "Monitor the canary deployment before promoting it to stable."