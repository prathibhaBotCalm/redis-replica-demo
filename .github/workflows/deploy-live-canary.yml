name: Deploy to Live Environment (Canary)
on:
  workflow_call:

jobs:
  deploy-live-canary:
    runs-on: ubuntu-latest
    name: Deploy to Live Environment (Canary)
    env:
      NODE_ENV: production
      CANARY_WEIGHT: 20
    steps:
      - name: Verify Live Secrets
        run: |
          # Define required secrets array for cleaner validation
          REQUIRED_SECRETS=(
            LIVE_HOST LIVE_USER LIVE_SSH_KEY APP_PORT 
            REDIS_MASTER_PORT REDIS_SLAVE_1_PORT REDIS_SLAVE_2_PORT 
            REDIS_SLAVE_3_PORT REDIS_SLAVE_4_PORT
            SENTINEL_1_PORT SENTINEL_2_PORT SENTINEL_3_PORT 
            REDIS_PASSWORD REDIS_MASTER_NAME REDIS_SENTINEL_QUORUM 
            REDIS_HOST_PROD REDIS_SENTINELS_PROD REDIS_PORT CANARY_WEIGHT
            IS_DEV BACKUP_INTERVAL MAX_BACKUPS RETENTION_DAYS
            GDRIVE_ENABLED GDRIVE_DIR GDRIVE_MAX_BACKUPS GDRIVE_RETENTION_DAYS
          )

          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              echo "::error::Secret $secret is not set"
              exit 1
            fi
          done
        env:
          LIVE_HOST: ${{ secrets.LIVE_HOST }}
          LIVE_USER: ${{ secrets.LIVE_USER }}
          LIVE_SSH_KEY: ${{ secrets.LIVE_SSH_KEY }}
          APP_PORT: ${{ secrets.APP_PORT }}
          REDIS_MASTER_PORT: ${{ secrets.REDIS_MASTER_PORT }}
          REDIS_SLAVE_1_PORT: ${{ secrets.REDIS_SLAVE_1_PORT }}
          REDIS_SLAVE_2_PORT: ${{ secrets.REDIS_SLAVE_2_PORT }}
          REDIS_SLAVE_3_PORT: ${{ secrets.REDIS_SLAVE_3_PORT }}
          REDIS_SLAVE_4_PORT: ${{ secrets.REDIS_SLAVE_4_PORT }}
          SENTINEL_1_PORT: ${{ secrets.SENTINEL_1_PORT }}
          SENTINEL_2_PORT: ${{ secrets.SENTINEL_2_PORT }}
          SENTINEL_3_PORT: ${{ secrets.SENTINEL_3_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_SENTINEL_PASSWORD: ${{ secrets.REDIS_SENTINEL_PASSWORD }}
          REDIS_MASTER_NAME: ${{ secrets.REDIS_MASTER_NAME }}
          REDIS_SENTINEL_QUORUM: ${{ secrets.REDIS_SENTINEL_QUORUM }}
          REDIS_HOST_PROD: ${{ secrets.REDIS_HOST_PROD }}
          REDIS_SENTINELS_PROD: ${{ secrets.REDIS_SENTINELS_PROD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          CANARY_WEIGHT: ${{ secrets.CANARY_WEIGHT }}
          IS_DEV: ${{ secrets.IS_DEV }}
          BACKUP_INTERVAL: ${{ secrets.BACKUP_INTERVAL }}
          MAX_BACKUPS: ${{ secrets.MAX_BACKUPS }}
          RETENTION_DAYS: ${{ secrets.RETENTION_DAYS }}
          GDRIVE_ENABLED: ${{ secrets.GDRIVE_ENABLED }}
          GDRIVE_DIR: ${{ secrets.GDRIVE_DIR }}
          GDRIVE_MAX_BACKUPS: ${{ secrets.GDRIVE_MAX_BACKUPS }}
          GDRIVE_RETENTION_DAYS: ${{ secrets.GDRIVE_RETENTION_DAYS }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set repository name lower-case
        id: repo
        run: |
          repo=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "repo=${repo}" >> $GITHUB_OUTPUT

      - name: Copy deploy files to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          source: './*'
          target: '/home/${{ secrets.LIVE_USER }}/app'
          strip_components: 0
          overwrite: true

      - name: Deploy Canary Release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIVE_HOST }}
          username: ${{ secrets.LIVE_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /home/${{ secrets.LIVE_USER }}/app

            # Function to install dependencies if needed
            install_dependency() {
              local cmd=$1
              local pkg=$2
              local install_cmd=$3
              
              if ! command -v $cmd &> /dev/null; then
                echo "$pkg not found, installing..."
                $install_cmd
              else
                echo "$pkg is already installed"
              fi
            }

            # Install Docker if needed
            install_dependency docker docker.io "sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl start docker && sudo systemctl enable docker && sudo usermod -aG docker $USER"

            # Install Docker Compose if needed
            install_dependency docker-compose "Docker Compose" "sudo curl -L \"https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose"

            echo "Logging into GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Clean up existing containers
            echo "Cleaning up existing containers..."
            docker-compose down || true

            # Create environment file
            echo "Setting up environment variables..."
            ENV_FILE=".env"
            cat > $ENV_FILE << EOF
            NODE_ENV=production
            APP_PORT=${{ secrets.APP_PORT }}
            REDIS_MASTER_PORT=${{ secrets.REDIS_MASTER_PORT }}
            REDIS_SLAVE_1_PORT=${{ secrets.REDIS_SLAVE_1_PORT }}
            REDIS_SLAVE_2_PORT=${{ secrets.REDIS_SLAVE_2_PORT }}
            REDIS_SLAVE_3_PORT=${{ secrets.REDIS_SLAVE_3_PORT }}
            REDIS_SLAVE_4_PORT=${{ secrets.REDIS_SLAVE_4_PORT }}
            SENTINEL_1_PORT=${{ secrets.SENTINEL_1_PORT }}
            SENTINEL_2_PORT=${{ secrets.SENTINEL_2_PORT }}
            SENTINEL_3_PORT=${{ secrets.SENTINEL_3_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_SENTINEL_PASSWORD=${{ secrets.REDIS_SENTINEL_PASSWORD }}
            REDIS_MASTER_NAME=${{ secrets.REDIS_MASTER_NAME }}
            REDIS_SENTINEL_QUORUM=${{ secrets.REDIS_SENTINEL_QUORUM }}
            REDIS_SENTINELS=sentinel-1:${{ secrets.SENTINEL_1_PORT }},sentinel-2:${{ secrets.SENTINEL_2_PORT }},sentinel-3:${{ secrets.SENTINEL_3_PORT }}
            REDIS_HOST=${{ secrets.REDIS_HOST_PROD }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            CANARY_WEIGHT=${{ secrets.CANARY_WEIGHT }}
            REDIS_SENTINELS_PROD=${{ secrets.REDIS_SENTINELS_PROD }}
            REDIS_HOST_PROD=${{ secrets.REDIS_HOST_PROD }}
            IS_DEV=${{ secrets.IS_DEV }}
            BACKUP_INTERVAL=${{ secrets.BACKUP_INTERVAL }}
            MAX_BACKUPS=${{ secrets.MAX_BACKUPS }}
            RETENTION_DAYS=${{ secrets.RETENTION_DAYS }}
            GDRIVE_ENABLED=${{ secrets.GDRIVE_ENABLED }}
            GDRIVE_DIR=${{ secrets.GDRIVE_DIR }}
            GDRIVE_MAX_BACKUPS=${{ secrets.GDRIVE_MAX_BACKUPS }}
            GDRIVE_RETENTION_DAYS=${{ secrets.GDRIVE_RETENTION_DAYS }}
            EOF

            # Make scripts executable
            chmod +x scripts/*.sh

            # Pull Docker images
            echo "Pulling latest live images..."
            STABLE_IMAGE="ghcr.io/${{ steps.repo.outputs.repo }}:live-latest"
            CANARY_IMAGE="ghcr.io/${{ steps.repo.outputs.repo }}:live-${{ github.sha }}"

            docker pull $STABLE_IMAGE
            docker pull $CANARY_IMAGE

            # Common environment variables for services
            COMMON_ENV=(
              "NODE_ENV=production"
              "APP_PORT=${{ secrets.APP_PORT }}"
              "REDIS_SENTINELS=sentinel-1:${{ secrets.SENTINEL_1_PORT }},sentinel-2:${{ secrets.SENTINEL_2_PORT }},sentinel-3:${{ secrets.SENTINEL_3_PORT }}"
              "REDIS_MASTER_NAME=${{ secrets.REDIS_MASTER_NAME }}"
              "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}"
              "REDIS_SENTINEL_PASSWORD=${{ secrets.REDIS_SENTINEL_PASSWORD }}"
              "REDIS_SENTINEL_QUORUM=${{ secrets.REDIS_SENTINEL_QUORUM }}"
              "REDIS_SENTINELS_PROD=${{ secrets.REDIS_SENTINELS_PROD }}"
              "REDIS_HOST_PROD=${{ secrets.REDIS_HOST_PROD }}"
              "IS_DEV=${{ secrets.IS_DEV }}"
              "BACKUP_INTERVAL=${{ secrets.BACKUP_INTERVAL }}"
              "MAX_BACKUPS=${{ secrets.MAX_BACKUPS }}"
              "RETENTION_DAYS=${{ secrets.RETENTION_DAYS }}"
              "GDRIVE_ENABLED=${{ secrets.GDRIVE_ENABLED }}"
              "GDRIVE_DIR=${{ secrets.GDRIVE_DIR }}"
              "GDRIVE_MAX_BACKUPS=${{ secrets.GDRIVE_MAX_BACKUPS }}"
              "GDRIVE_RETENTION_DAYS=${{ secrets.GDRIVE_RETENTION_DAYS }}"
            )

            # Create an override file for the canary deployment
            cat > docker-compose.override.yml << EOF
            services:
              app-stable:
                image: $STABLE_IMAGE
                environment:
                  - ${COMMON_ENV[@]}
                  - CANARY_WEIGHT=${{ secrets.CANARY_WEIGHT }}
                ports:
                  - "3001:${{ secrets.APP_PORT }}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:${{ secrets.APP_PORT }}/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 20s

              app-canary:
                image: $CANARY_IMAGE
                environment:
                  - ${COMMON_ENV[@]}
                ports:
                  - "3002:${{ secrets.APP_PORT }}"
                restart: always
                networks:
                  - redis-network
                depends_on:
                  - redis-master
                  - sentinel-1
                  - sentinel-2
                  - sentinel-3
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:${{ secrets.APP_PORT }}/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 20s

            volumes:
              redis-data:
              grafana-data:
            EOF

            # Validate Docker Compose configuration
            echo "Validating Docker Compose configuration..."
            docker-compose config

            # Start containers
            echo "Starting Redis services and application containers..."
            docker-compose --profile production up -d

            # Wait for health checks to pass
            echo "Waiting for services to be ready..."
            MAX_RETRIES=10
            RETRY_COUNT=0

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              STABLE_READY=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health || echo "000")
              CANARY_READY=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3002/health || echo "000")
              
              if [[ "$STABLE_READY" == "200" && "$CANARY_READY" == "200" ]]; then
                echo "Both services are healthy!"
                break
              fi
              
              echo "Waiting for services to be ready... (Attempt $((RETRY_COUNT+1))/$MAX_RETRIES)"
              echo "  - Stable service: $STABLE_READY"
              echo "  - Canary service: $CANARY_READY"
              
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT+1))
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Warning: Services didn't respond with 200 status within expected time."
              echo "Continuing with deployment, but please check service health manually."
            fi

            # Install and configure Nginx
            install_dependency nginx nginx "sudo apt-get update && sudo apt-get install -y nginx"

            # Configure Nginx for canary deployment
            echo "Updating Nginx configuration for canary deployment..."
            sudo mkdir -p /etc/nginx/conf.d

            # Create the Nginx configuration file with proper canary weight
            cat << EOF | sudo tee /etc/nginx/conf.d/nextjs-app.conf
            upstream nextjs_stable {
                server 127.0.0.1:3001;
            }

            upstream nextjs_canary {
                server 127.0.0.1:3002;
            }

            # Split traffic between stable and canary based on a random number
            split_clients "\${remote_addr}\${time_iso8601}" \$upstream {
                ${{ secrets.CANARY_WEIGHT }}%   nextjs_canary;
                *                       nextjs_stable;
            }

            server {
                listen 80;

                # Add header to identify the serving version
                add_header X-Version \$upstream;
                
                # Add health check endpoint
                location /health {
                    proxy_pass http://\$upstream/health;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    access_log off;
                }

                location / {
                    proxy_pass http://\$upstream;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_connect_timeout 5s;
                    proxy_read_timeout 60s;
                }
            }
            EOF

            # Backup the default nginx site configuration (if it exists)
            if [ -f /etc/nginx/sites-enabled/default ]; then
              sudo mv /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/default.bak
            fi

            # Test Nginx configuration
            echo "Testing Nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed. Starting/reloading Nginx..."
              sudo systemctl restart nginx || sudo systemctl start nginx
              echo "Waiting for Nginx to start..."
              sleep 3
              sudo systemctl status nginx
            else
              echo "Nginx configuration failed. Checking for errors..."
              sudo cat /var/log/nginx/error.log
              exit 1
            fi

            # Verify the deployment
            echo "Testing deployment..."
            NGINX_RESPONSE=$(curl -s -I http://localhost/health | head -n 1 || echo "Failed to connect")

            if [[ "$NGINX_RESPONSE" == *"200 OK"* ]]; then
              echo "✅ Canary deployment verified successfully!"
            else
              echo "⚠️ Nginx is not returning 200 OK for the health check: $NGINX_RESPONSE"
              echo "Manual verification may be required."
            fi

            echo "✅ Canary deployment completed with ${{ secrets.CANARY_WEIGHT }}% of traffic to the new version."
            echo "📊 Monitor the canary deployment metrics before promoting it to stable."
