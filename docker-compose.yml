networks:
  redis-network:
    driver: bridge
  monitoring-network:
    driver: bridge

services:
  app:
    build:
      context: .
    ports:
      - '${APP_PORT}:${APP_PORT}'
    networks:
      - redis-network
      - monitoring-network
    restart: unless-stopped
    env_file:
      - .env

  redis-master:
    image: redis/redis-stack:latest
    command: ['/scripts/init-master.sh']
    ports:
      - '${REDIS_MASTER_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - redis-data:/data
      - ./backup:/backup
      - ./scripts/init-master.sh:/scripts/init-master.sh:ro
    healthcheck:
      test:
        ['CMD', 'bash', '-c', 'redis-cli -a ${REDIS_PASSWORD} ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  redis-slave-1:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_1_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-2:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_2_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-3:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_3_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-4:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_4_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

      # Add Redis exporters
  redis-exporter-master:
    image: oliver006/redis_exporter
    container_name: redis-exporter-master
    environment:
      - REDIS_ADDR=redis://redis-master:6379
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9121:9121"
    restart: unless-stopped
    profiles:
      - production

  redis-exporter-slave1:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave1
    environment:
      - REDIS_ADDR=redis://redis-slave-1:6379
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9122:9121"  # Expose internal port 9121 on host port 9122
    restart: unless-stopped
    profiles:
      - production

  redis-exporter-slave2:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave2
    environment:
      - REDIS_ADDR=redis://redis-slave-2:6379
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9123:9121"  # Expose internal port 9121 on host port 9123
    restart: unless-stopped
    profiles:
      - production

  sentinel-1:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_1_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  sentinel-2:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_2_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  sentinel-3:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_3_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  # Backup service for Redis data
  redis-backup:
    image: alpine:latest
    volumes:
      - redis-data:/data:ro
      - ./backup:/backup
      - ./scripts/backup.sh:/scripts/backup.sh:ro
    environment:
      - BACKUP_INTERVAL=600  # 10 minutes
      - MAX_BACKUPS=7        # Keep 7 days of backups
    networks:
      - redis-network
    entrypoint: ['/bin/sh', '/scripts/backup.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    profiles:
      - production
      - development

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - redis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - "3005:3000"
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
