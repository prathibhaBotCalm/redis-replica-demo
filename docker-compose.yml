networks:
  redis-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  frontend-network:
    driver: bridge

services:

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    environment:
      - DROPLET_IP=${DROPLET_IP}
      - APP_PORT=3000
      - CANARY_WEIGHT=${CANARY_WEIGHT:-20}
    networks:
      - frontend-network
    restart: unless-stopped
    command: >
      /bin/bash -c "
      cat /etc/nginx/conf.d/app.conf | 
      envsubst '$$DROPLET_IP $$APP_PORT $$CANARY_WEIGHT' > /etc/nginx/conf.d/default.conf &&
      nginx -g 'daemon off;'
      "
    depends_on:
      - app
  app:
    image: ${APP_IMAGE:-prathibhabotcalm/nextjs-app:latest}
    container_name: app
    ports:
      - '3000:${APP_PORT}'
    networks:
      - redis-network
      - monitoring-network
      - frontend-network
    restart: unless-stopped
    env_file:
      - .env
      - .env.deployment
    environment:
      - APP_IMAGE=${APP_IMAGE}
      - CANARY_IMAGE=${CANARY_IMAGE}
      - CANARY_WEIGHT=${CANARY_WEIGHT:-0}
      - DROPLET_IP=${DROPLET_IP}
      - APP_PORT=${APP_PORT:-3000}
    labels:
      - "com.example.service=app-stable"

  app-canary:
    image: ${CANARY_IMAGE}
    container_name: app-canary
    expose:
      - '${APP_PORT}'
    networks:
      - redis-network
      - monitoring-network
      - frontend-network
    restart: unless-stopped
    env_file:
      - .env
      - .env.deployment
    labels:
      - "com.example.service=app-canary"

  redis-master:
    image: redis/redis-stack:latest
    command: ['/scripts/init-master.sh']
    ports:
      - '${REDIS_MASTER_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - redis-data:/data
      - ./backup:/backup
      - ./scripts/init-master.sh:/scripts/init-master.sh:ro
    healthcheck:
      test:
        ['CMD', 'bash', '-c', 'redis-cli -a ${REDIS_PASSWORD} ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  redis-slave-1:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_1_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-2:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_2_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-3:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_3_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  redis-slave-4:
    image: redis/redis-stack:latest
    command: ['/scripts/init-slave.sh']
    depends_on:
      redis-master:
        condition: service_healthy
    ports:
      - '${REDIS_SLAVE_4_PORT}:6379'
    networks:
      - redis-network
    volumes:
      - ./scripts/init-slave.sh:/scripts/init-slave.sh:ro
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    profiles:
      - production
      - development
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 128M

  # Redis exporters section
  redis-exporter-master:
    image: oliver006/redis_exporter
    container_name: redis-exporter-master
    environment:
      - REDIS_ADDR=redis://redis-master:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9121:9121"
    restart: unless-stopped
    profiles:
      - production

  redis-exporter-slave1:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave1
    environment:
      - REDIS_ADDR=redis://redis-slave-1:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9122:9121"
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - redis-slave-1

  redis-exporter-slave2:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave2
    environment:
      - REDIS_ADDR=redis://redis-slave-2:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9123:9121"
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - redis-slave-2

  redis-exporter-slave3:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave3
    environment:
      - REDIS_ADDR=redis://redis-slave-3:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9124:9121"
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - redis-slave-3
    
  redis-exporter-slave4:
    image: oliver006/redis_exporter
    container_name: redis-exporter-slave4
    environment:
      - REDIS_ADDR=redis://redis-slave-4:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - redis-network
      - monitoring-network
    ports:
      - "9125:9121"
    restart: unless-stopped
    profiles:
      - production
    depends_on:
      - redis-slave-4

  # Sentinel configuration
  sentinel-1:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_1_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  sentinel-2:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_2_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  sentinel-3:
    image: bitnami/redis-sentinel:latest
    environment:
      - REDIS_MASTER_NAME=${REDIS_MASTER_NAME}
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
      - REDIS_SENTINEL_PASSWORD=${REDIS_PASSWORD}
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=180000
      - REDIS_SENTINEL_ANNOUNCE_HOSTNAMES=yes
    ports:
      - '${SENTINEL_3_PORT}:26379'
    networks:
      - redis-network
    restart: always
    profiles:
      - production
      - development

  redis-backup:
    build:
      context: .
      dockerfile: ./scripts/Dockerfile.redis-backup
    volumes:
      - redis-data:/data:ro
      - ./backup:/backup
      - ./config/rclone:/config/rclone:ro
    environment:
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-600}  # 10 minutes
      - MAX_BACKUPS=${MAX_BACKUPS:-24}           # Keep 24 backups by default
      - RETENTION_DAYS=${RETENTION_DAYS:-7}      # Keep 7 days of backups
      - GDRIVE_ENABLED=${GDRIVE_ENABLED:-true}   # Enable Google Drive backup
      - GDRIVE_DIR=${GDRIVE_DIR:-"redis-backups"}
      - GDRIVE_MAX_BACKUPS=${GDRIVE_MAX_BACKUPS:-48}
      - GDRIVE_RETENTION_DAYS=${GDRIVE_RETENTION_DAYS:-14}
    networks:
      - redis-network
    depends_on:
      redis-master:
        condition: service_healthy
    profiles:
      - production
      - development

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - redis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_METRICS_ENABLED=true
      - GF_METRICS_BASIC_AUTH_ENABLED=false
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3005:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M
        
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "9100:8080"
    networks:
      - monitoring-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local