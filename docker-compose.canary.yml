version: '3.8'

services:
  canary:
    image: ${CANARY_IMAGE}
    container_name: app-canary-1
    ports:
      - '3001:${APP_PORT}'
    networks:
      - redis-network
      - monitoring-network
    restart: unless-stopped
    environment:
      - LOG_PATH=/app
      - TEMP_DIR=/tmp/app-logs
      - CANARY_DEPLOYMENT=true
      - CANARY_WEIGHT=${CANARY_WEIGHT}
    env_file:
      - .env
      - .env.deployment
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.services.canary.loadbalancer.server.port=${APP_PORT}'
      - 'traefik.http.routers.canary.entrypoints=web'
      - 'traefik.http.routers.canary.rule=Host(`${DROPLET_IP}`)'

  traefik:
    image: traefik:v2.8
    container_name: app-traefik-1
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--providers.docker.network=monitoring-network'
      - '--accesslog=true'
      - '--log.level=DEBUG'
    ports:
      - '80:80'
      - '8080:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - redis-network
      - monitoring-network
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      # Forward all traffic to app container directly
      - 'traefik.http.routers.catch-all.rule=PathPrefix(`/`)'
      - 'traefik.http.routers.catch-all.entrypoints=web'
      - 'traefik.http.routers.catch-all.service=app@docker'
      - 'traefik.http.routers.catch-all.priority=1'

networks:
  redis-network:
    external: true
  monitoring-network:
    external: true